## Design Decisions

- I made a number of decisions while constructing my 'HangmanAPI'. First off, I did not want a user to be able to make their own amount of attempts because I wanted it to be a true hangman feel. I settled on 12 for the  amount of attempts because that gives 2 legs, 4 arm sections, head, 2 hands and 2 feet. While defining what makes a valid move I had to specify what moves are illegal and to only allow one letter to be guessed at a time. I wanted to make sure a user could not lose their game at any point. So I made the 'urlsafe_game_key' be returned in each GameForm so a user could not lose their game. When I was designing 'get_user_rankings' I wanted to include new users so decided to allow scores to be equal to 0 in my queries. 

- I struggled with whether to include a 'message' function in the 'to_form' method for the Game entity. On one hand it is helpful to pass along a message to the user with how often the 'to_form' method was used. On the other I was not sure it was necessary and seemed redundant if the user at some point returned many games at once. In the end I decided to include it because this one edge case did not outweigh my annoyance at seeing pointless messages when looking at many games at once. I also struggled with what kind of CRON update I should provide. In the end I decided to send the game key to users with unfinished games once a day. As I mentioned earlier, my goal was never to have someone lose a game. This way they could grab the key from their email and immediately begin their game again. 